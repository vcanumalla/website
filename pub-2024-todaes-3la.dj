# Application-Level Validation of Accelerator Designs Using a Formal Software/Hardware Interface

  [Bo-Yuan Huang][]\*,
\ [Steven Lyubomirsky][]\*,
\ [Yi Li][],
\ [Mike He][],
\ [Gus Henry Smith][Gus Smith],
\ [Thierry Tambe][],
\ [Akash Gaonkar][],
\ [Vishal Canumalla][],
\ [Andrew Cheung][],
\ [Gu-Yeon Wei][],
\ [Aarti Gupta][],
\ [Zachary Tatlock][],
\ [Sharad Malik][]

Transactions on Design Automation of Electronic Systems (TODAES), 2024

{.columns .columns-8rem}
- [paper](pubs/2024-todaes-3la/2023-todaes-3la.pdf)
- [publisher](https://dl.acm.org/doi/10.1145/3639051)


## Abstract

Ideally, accelerator development should be as easy as software development. 
Several recent design languages/tools are working toward this goal, 
but actually testing early designs on real applications end-to-end 
remains prohibitively difficult due to the costs of building 
specialized compiler and simulator support. We propose a 
new first-in-class, mostly automated methodology termed ‚Äú3LA‚Äù 
to enable end-to-end testing of prototype accelerator designs on 
unmodified source applications. A key contribution of 3LA is the 
use of a formal software/hardware interface that specifies an 
accelerator‚Äôs operations and their semantics. Specifically, we 
leverage the Instruction-level Abstraction (ILA) formal 
specification for accelerators that has been successfully used 
thus far for accelerator implementation verification. We show how the 
ILA for accelerators serves as a software/hardware interface, similar 
to the Instruction Set Architecture for processors, that can be used 
for automated development of compilers and instruction-level simulators. 
Another key contribution of this work is to show how ILA-based accelerator 
semantics enables extending recent work on equality saturation to 
auto-generate basic compiler support for prototype accelerators 
in a technique we term ‚Äúflexible matching.‚Äù By combining 
flexible matching with simulators auto-generated from ILA
 specifications, our approach enables end-to-end evaluation 
 with modest engineering effort. We detail several case studies 
 of 3LA, which uncovered an unknown flaw in a recently published 
 accelerator and facilitated its fix.



## BibTeX

{.bib}
```
@article{10.1145/3639051,
author = {Huang, Bo-Yuan and Lyubomirsky, Steven and Li, Yi and He, Mike and Smith, Gus Henry and Tambe, Thierry and Gaonkar, Akash and Canumalla, Vishal and Cheung, Andrew and Wei, Gu-Yeon and Gupta, Aarti and Tatlock, Zachary and Malik, Sharad},
title = {Application-level Validation of Accelerator Designs Using a Formal Software/Hardware Interface},
year = {2024},
issue_date = {March 2024},
publisher = {Association for Computing Machinery},
address = {New York, NY, USA},
volume = {29},
number = {2},
issn = {1084-4309},
url = {https://doi.org/10.1145/3639051},
doi = {10.1145/3639051},
abstract = {Ideally, accelerator development should be as easy as software development. Several recent design languages/tools are working toward this goal, but actually testing early designs on real applications end-to-end remains prohibitively difficult due to the costs of building specialized compiler and simulator support. We propose a new first-in-class, mostly automated methodology termed ‚Äú3LA‚Äù to enable end-to-end testing of prototype accelerator designs on unmodified source applications. A key contribution of 3LA is the use of a formal software/hardware interface that specifies an accelerator‚Äôs operations and their semantics. Specifically, we leverage the Instruction-level Abstraction (ILA) formal specification for accelerators that has been successfully used thus far for accelerator implementation verification. We show how the ILA for accelerators serves as a software/hardware interface, similar to the Instruction Set Architecture for processors, that can be used for automated development of compilers and instruction-level simulators. Another key contribution of this work is to show how ILA-based accelerator semantics enables extending recent work on equality saturation to auto-generate basic compiler support for prototype accelerators in a technique we term ‚Äúflexible matching.‚Äù By combining flexible matching with simulators auto-generated from ILA specifications, our approach enables end-to-end evaluation with modest engineering effort. We detail several case studies of 3LA, which uncovered an unknown flaw in a recently published accelerator and facilitated its fix.},
journal = {ACM Trans. Des. Autom. Electron. Syst.},
month = {feb},
articleno = {35},
numpages = {25},
keywords = {Accelerator, domain-specific language, compilation, validation, software/hardware interface}
}
```

[üìù publications index](publications.html)

